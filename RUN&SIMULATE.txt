MIPS pipelined processor

**Source folder contains the *.vhd files
**Bin folder contains the assembler and an explanatory README file.

**Before simulating the processor, make sure to copy the assembler output to a file name "Init.dat", which must be in the source folder.

Main components:
	IF/ID
	-PC.vhd
	-Memory.vhd (Instruction instantiation)
	-IF_ID.vhd (pipeline stage)
	
	ID/EX
	-Registers.vhd
	-Control_Unit.vhd
	-HazardDetectionUnit.vhd
	-ID_EX.vhd (pipeline stage)
	
	EX/MEM
	-ALU.vhd
	-Forwarding.vhd
	-EX_MEM.vhd (pipeline stage)
	
	MEM/WB
	-Memory.vhd (Data instantiation)
	-MEM_WB.vhd (pipeline stage)
	
All relevant components were tested INDIVIDUALLY and passed all the tests. TestScript_readme.txt explains the tests and how to run them.

cpu.vhd is the file where all the components are connected in order to make the MIPS processor. Other parts were added directly to the module such as: 
	-multiplexers 
	-sign extension logic 
	-branch and jump address calculations

COMBINED ENTITY PIPELINED CPU:
**What is working so far**

Our MIPS pipelined processor is able to perform the following actions:
	-Pipelined propagation of the instructions (pipeline registers)
	-Multiplexer selection for register sources and destinations
	-Access to the instruction memory
	-Writing and reading from Registers
	-Calculating branch and jump address
	-Performing all ALU operations
	
This processor implementation is not FULLY capable of performing the following actions (these components are integrated in cpu.vhd but not all functionality is correct due to overall complexity of the design):
	-Hazard Detection (separate module)
	-Forwarding (separate module)
	-Branch Prediction (inside cpu.vhd)
	-Access Data memory (inside cpu.vhd) -> the memory module works, but the control signals in cpu.vhd do not
	
In order to simulate cpu.vhd, run these commands on the transcript in ModelSim:
	
	1) source cpu_compiler.tcl
	2) CompileAndSimulate

The simulation will attempt to execute the instructions loaded from Init.dat.
NOTE: Both Init.dat and InitData.dat must be present in the runtime directory for the corresponding memory components to be initialized.

The following signals will be disaplayed on the simulation screen when the command is run:
Clocks
Memory Signal
Registers Unit Inputs and Ouputs
Register values (0 through 31)
Control Unit Signals
ALU inputs and outputs
Multiplexer selector signals