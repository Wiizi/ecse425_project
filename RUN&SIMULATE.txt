MIPS pipelined processor

**Source folder contains the *.vhd files
**Bin folder contains the assembler and an explanatory README file.

**Before simulating the processor, make sure to copy the assembler output to a file name "Init.dat", which must be in the source folder.

*** PLEASE TEST WITH (clk period) = 10 * (clk_mem period)

cpu.vhd is the file where all the components are connected in order to make the MIPS processor.

COMBINED ENTITY PIPELINED CPU:
**What is working so far**

Our MIPS pipelined processor is able to perform the following actions:
	-Pipelined propagation of the instructions (pipeline registers)
	-Multiplexer selection for register sources and destinations
	-Access to the instruction memory
	-Writing and reading from Registers
	-Early ID branching
	-Performing all ALU operations
	-Accessing and writing to data memory
	
This processor implementation is not FULLY capable of performing the following actions (these components are integrated in cpu.vhd but not all functionality is correct due to overall complexity of the design):
	-Branch Prediction (inside cpu.vhd)

NOTE: We have implemented Branch Prediction modules and it works correcly individually. Literally most of the logic for branch prediction is also completed. However, we were unable to iron out all the bugs in the implementation. If you wish to verify the final state machine of the predictor, you can view all the signals in the simulation window under Predictor signals section.

There are some corner cases that result in failure of the processor to branch correctly. Approximately 10% of branch instructions fail (from observation).

In order to simulate cpu.vhd, run these commands on the transcript in ModelSim:
	
	1) source cpu_compiler.tcl
	2) CompileAndSimulate

The simulation will attempt to execute the instructions loaded from Init.dat.
NOTE: Both Init.dat and InitData.dat must be present in the runtime directory for the corresponding memory components to be initialized.

The following signals will be displayed on the simulation screen when the command is run:
Clocks
Instruction and Data Memory Signal
Registers Inputs and Ouputs
Register values (0 through 31 + HI + LO) YOU WILL FIND THESE MOST USEFUL 
Control Unit Signals
ALU inputs and outputs
Multiplexer selector signals
Jump and Branch logic signals
Branch and Branch Preediction signals